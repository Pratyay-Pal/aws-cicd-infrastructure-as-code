###This is the CFN to create the CICD Pipeline which will in turn deploy the actual infrastruture.
#If this file is changed, the CICD Stack in AWS will be changed through change-sets. Otherwise the update will make no change
#The change is triggered by Github itself through workflows

#Author: Pratyay Pal [https://github.com/Pratyay-Pal]

#Reference Doc-> Combine Pipeline-Eventbridge-Cloudtrail-S3 Events: https://docs.aws.amazon.com/codepipeline/latest/userguide/create-cloudtrail-S3-source-cfn.html

#Change values in Parameter section only. Leave the rest as it is.
Parameters:
  #Overridden in github-actions.yml by S3_Bucket_Name. If you need to change it, change it there
  #Artifact store for Codepipeline. Codepipeline will generate artifacts for the subsequent stages which are stored here.
  ArtifactStoreBucket:
    Type: String
    Default: aws-cicd-artifacts-store
    Description: Artifact store for Codepipeline. 
  
  #Overridden in github-actions.yml by S3_Bucket_Name. If you need to change it, change it there
  #Bucket where Source Artifact for Codepipeline is stored. This is where the CFN for your stack will go to. Github actions will auomatically place the ZIP here.
  SourceArtifactBucket:
    Type: String
    Default: aws-cfn-infra-store
    Description: Bucket where Source Artifact for Codepipeline is stored.
  
  #Overridden in github-actions.yml by Infrastructure_Stack_Zip_File. If you need to change it, change it there
  #Source Artifact for Codepipeline. Github actions will auomatically ZIP the Infrastructure CFN.
  SourceArtifact:
    Type: String
    Default: infrastructure-cfn.zip
    Description: Source Artifact for Codepipeline. Must be ZIP.

  #Overridden in github-actions.yml by Infrastructure_Stack_Yaml_File. If you need to change it, change it there
  #Source Artifact Code for Codepipeline. Github actions will auomatically ZIP the Infrastructure CFN.
  SourceArtifactCode:
    Type: String
    Default: infrastructure-cfn.yaml
    Description: Infrastruture as code. Must be YAML/JSON.
  
  #Overridden in github-actions.yml by Infrastructure_Stack_Name. If you need to change it, change it there
  #Name of the stack in which your CFN will be deployed to
  InfrastructureDeploymentStackName:
    Type: String
    Default: infrastructure-stack
    Description: Name of stack of the Infrastructure.

  #Name of Lambda which will delete files from S3
  Lambda2DeleteS3FilesName:
    Type: String
    Default: lambda-to-delete-S3-files
    Description: Name of Lambda which deletes files in S3 before bucket deletion.

  #Event Bridge Rule which listens to Cloudtrail S3 Put events
  EventBridgeRuleName:
    Type: String
    Default: EB-Execute-Pipeline-From-S3-Put
    Description: Name of Event bridge Rule which triggers CICD Pipeline on S3 PUT.

  #Name of the CICD Pipeline
  CICDInfraName:
    Type: String
    Default: cicd-pipeline-infra-deployment
    Description: Name of the CICD Pipeline which does stack deployment.

  #Necessary Roles
  CFNRoleName:
    Type: String
    Default: AWS-CFN-Infra-Role
    Description: Role that Cloudformation assumes when creating resources on AWS.
  
  Lambda2S3RoleName:
    Type: String
    Default: AWS-Lambda-S3-Role
    Description: Role that Lambda uses to connect to S3.

  EB2PipeLineRoleName:
    Type: String
    Default: Eventbridge-pipeline-Role
    Description: Role that EventBridge uses to trigger Code Pipeline.

Resources:

###BUCKETS

  S3BucketToStoreCFN:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceArtifactBucket
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
    DeletionPolicy: Retain
  
  S3BucketToStoreArtifacts:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactStoreBucket
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete

###END BUCKETS

#ROLES

  #Role used by Lambda to connect to S3
  LambdaRole2Connect2S3:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Lambda2S3RoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: lambda-s3-artifact-bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketToStoreArtifacts}
                  - !Sub arn:aws:s3:::${S3BucketToStoreArtifacts}/*
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  #Role used by CFN to create everything
  CFNRole2CreateResources:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref CFNRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: Admin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource:
                  - "*"
  
  #Role used by Event bridge to trigger pipeline
  EB2PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EB2PipeLineRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: eb-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref InfrastructureDeployment ] ]

  #S3 Buccket Policy For Cloudtrail Logging
  CloudTrail2TrackBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3BucketToStoreArtifacts
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: 
              - s3:GetBucketAcl
            Resource: 
              - !GetAtt S3BucketToStoreArtifacts.Arn
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action: 
              - s3:PutObject
            Resource: 
              - !Join [ '', [ !GetAtt S3BucketToStoreArtifacts.Arn, '/AWSLogs/', !Ref 'AWS::AccountId', '/*' ] ]
            Condition: 
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

#END ROLES

#LAMBDA

  Lambda2EmptyBucketBeforeDestroying:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Ref Lambda2DeleteS3FilesName
      Runtime: "python3.12"
      Timeout: 60
      Role: !GetAtt LambdaRole2Connect2S3.Arn
      Handler: "index.lambda_handler"
      Code: 
        ZipFile: |
          #!/usr/bin/env python
          import json
          import boto3
          import cfnresponse

          s3 = boto3.client('s3')
          response_data = {}
          def lambda_handler(event, context):
              print("Event : "+str(event))
              bucket_name=event['ResourceProperties']['bucket_name']
              try:
                  if event['RequestType'] == 'Delete':                
                      allObjs = s3.list_object_versions(Bucket=bucket_name)
                      for objVer in allObjs.get('Versions', []):
                          s3.delete_object(
                              Bucket=bucket_name,
                              Key=objVer['Key'],
                              VersionId=objVer['VersionId']
                          )                  
                      for objDelMrkr in allObjs.get('DeleteMarkers', []):
                          s3.delete_object(
                              Bucket=bucket_name,
                              Key=objDelMrkr['Key'],
                              VersionId=objDelMrkr['VersionId']
                          )
                  print("Execution succesfull!")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
  
  LambdaCustomResource:
    Type: Custom::LambdaCustomResource
    Properties:
      ServiceToken: !GetAtt Lambda2EmptyBucketBeforeDestroying.Arn
      bucket_name: !Ref S3BucketToStoreArtifacts ###THIS IS NEEDED TO CREATE DEPENDENCY BETWEEN DELETION LAMBDA(Lambda2EmptyBucketBeforeDestroying) AND S3 BUCKET
      ### IF THIS IS NOT PRESENT CFN WILL TRY TO DESTROY THE S3 BEFORE IT IS EMPTIED

###END LAMBDA

###EVENTBRIDGE

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger Codepipeline on S3 change
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - 'AWS API Call via CloudTrail'
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CopyObject
            - PutObject
          requestParameters:
            bucketName:
              - !Ref S3BucketToStoreCFN
            key:
              - !Ref SourceArtifact
      Name: !Ref EventBridgeRuleName
      Targets:
        - Arn:
            !Join [ '', [ 'arn:aws:codepipeline:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref CICDInfraName ] ]
          RoleArn: !GetAtt EB2PipelineRole.Arn
          Id: codepipeline-AppPipeline

###END EVENTBRIDGE

###CLOUDTRAIL

  AwsCloudTrail:
    DependsOn:
      - CloudTrail2TrackBucketPolicy
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: S3-Put-Event-Logging
      S3BucketName: !Ref S3BucketToStoreArtifacts
      EventSelectors:
        - DataResources:
          - Type: AWS::S3::Object
            Values:
              - !Join [ '', [ !GetAtt S3BucketToStoreCFN.Arn, '/', !Ref SourceArtifact ] ]
          ReadWriteType: WriteOnly
          IncludeManagementEvents: false
      IncludeGlobalServiceEvents: true
      IsLogging: true
    

###END CLOUDTRAIL

###CICD PIPELINE

  InfrastructureDeployment:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref S3BucketToStoreArtifacts
        Type: S3
      Name: !Ref CICDInfraName
      PipelineType: V2
      RoleArn: !GetAtt CFNRole2CreateResources.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                PollForSourceChanges: false
                S3Bucket: !Ref S3BucketToStoreCFN
                S3ObjectKey: !Ref SourceArtifact
              OutputArtifacts: 
                - Name: SourceArtifact
        - Name: Deploy
          Actions:
            - Name: Create-Change-Set
              RunOrder: 2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: pipeline-changeset
                RoleArn: !GetAtt CFNRole2CreateResources.Arn
                StackName: !Ref InfrastructureDeploymentStackName
                TemplatePath: !Join [ "::", [ SourceArtifact, !Ref SourceArtifactCode ] ]
              InputArtifacts:
                - Name: SourceArtifact
            - Name: Execute-Change-Set
              RunOrder: 3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: pipeline-changeset
                StackName: !Ref InfrastructureDeploymentStackName
              InputArtifacts:
                - Name: SourceArtifact

###END CICD PIPELINE